@page
@model Sorling.SqlConnAuthWeb.areas.sqlconnauth.pages.JSModel
@{
    Layout = null;
    this.Response.ContentType = "application/javascript";
}
(function () {
@if (Model.SqlAuthUIOptions.UseThemeSwitcher())
{
    <text>
        const THEME_KEY = '@(Model.SqlAuthUIOptions.ThemeSwitcherLocalStorageName)';
        const iconContainer = document.getElementById('theme-switcher-icon-container');
        const iconSpan = document.getElementById('theme-switcher-icon');
        const forcedTheme = document.documentElement.getAttribute('data-bss-forced-theme');
        const THEMES = ['system', 'light', 'dark'];
        // SVGs for system, light, dark (all monochrome)
        const ICONS = {
        'system': '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><rect x="3" y="5" width="18" height="12" rx="2" fill="currentColor" /><rect x="7" y="19" width="10" height="2" rx="1" fill="currentColor" /></svg>',
        'light': '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><circle cx="12" cy="12" r="5" fill="currentColor" /><g stroke="currentColor" stroke-width="2"><line x1="12" y1="1" x2="12" y2="4" /><line x1="12" y1="20" x2="12" y2="23" /><line x1="4.22" y1="4.22" x2="5.64" y2="5.64" /><line x1="18.36" y1="18.36" x2="19.78" y2="19.78" /><line x1="1" y1="12" x2="4" y2="12" /><line x1="20" y1="12" x2="23" y2="12" /><line x1="4.22" y1="19.78" x2="5.64" y2="18.36" /><line x1="18.36" y1="5.64" x2="19.78" y2="4.22" /></g></svg>',
        'dark': '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M21 12.79A9 9 0 0 1 12.79 3a7 7 0 1 0 8.21 9.79z" /></svg>'
        };
        function getStoredTheme() {
        return localStorage.getItem(THEME_KEY);
        }
        function setStoredTheme(theme) {
        localStorage.setItem(THEME_KEY, theme);
        }
        function getSystemTheme() {
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }
        function getPreferredTheme() {
        if (forcedTheme) return forcedTheme;
        const storedTheme = getStoredTheme();
        if (storedTheme) return storedTheme;
        return 'system';
        }
        function applyTheme(theme) {
        let themeToSet = theme;
        if (theme === 'system') {
        themeToSet = getSystemTheme();
        }
        document.documentElement.setAttribute('data-bs-theme', themeToSet);
        document.documentElement.setAttribute('data-theme', themeToSet);
        }
        function setTheme(theme) {
        setStoredTheme(theme);
        applyTheme(theme);
        updateIcon(theme);
        }
        function updateIcon(theme) {
        if (!iconSpan) return;
        iconSpan.innerHTML = ICONS[theme] || ICONS['system'];
        iconContainer.title =
        theme === 'system' ? 'System default' :
        theme.charAt(0).toUpperCase() + theme.slice(1) + ' mode';
        }
        function cycleTheme() {
        const current = getPreferredTheme();
        let idx = THEMES.indexOf(current);
        if (idx === -1) idx = 0;
        const nextTheme = THEMES[(idx + 1) % THEMES.length];
        setTheme(nextTheme);
        }
        if (iconContainer) {
        iconContainer.addEventListener('click', function() {
        cycleTheme();
        });
        }
        // On system theme change, update if system is selected
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function() {
        if (getStoredTheme() === 'system' || !getStoredTheme()) {
        applyTheme('system');
        updateIcon('system');
        }
        });
        // On page load
        document.addEventListener('DOMContentLoaded', function() {
        const theme = getPreferredTheme();
        setTheme(theme);
        });
    </text>
}
    // --- Recent Items Management ---
    const RECENT_ITEMS_KEY = '@(Sorling.SqlConnAuthWeb.SqlAuthConsts.RECENTITEMSLOCALSTORAGE)';
    const MAX_RECENT_ITEMS = @(Model.SqlAuthUIOptions.MaxRecentItems);

    function getSqlAuthContext() {
        if (!window.SqlAuthContext) return null;
        const { SqlServer, SqlUserName, SqlDBName } = window.SqlAuthContext;
        if (!SqlServer || !SqlUserName) return null;
        return { SqlServer, SqlUserName, SqlDBName };
    }

    // Gets the recent items array from local storage.
    function getRecentItems() {
        const json = localStorage.getItem(RECENT_ITEMS_KEY);
        if (!json) return [];
        try {
            return JSON.parse(json);
        } catch {
            return [];
        }
    }

    // Saves the recent items array to local storage.
    function saveRecentItems(items) {
        localStorage.setItem(RECENT_ITEMS_KEY, JSON.stringify(items));
    }

    // Adds or updates a recent server/user pair, sorts by recency, and truncates if needed.
    // Uses window.SqlAuthContext for server/user.
    function addRecentServerUser() {
        const ctx = getSqlAuthContext();
        if (!ctx) return;
        let items = getRecentItems();
        const idx = items.findIndex(x => x.server === ctx.SqlServer && x.user === ctx.SqlUserName);
        if (idx !== -1) {
            // Move to front
            const [item] = items.splice(idx, 1);
            items.unshift(item);
        } else {
            items.unshift({ server: ctx.SqlServer, user: ctx.SqlUserName, databases: [] });
        }
        if (items.length > MAX_RECENT_ITEMS) {
            items = items.slice(0, MAX_RECENT_ITEMS);
        }
        saveRecentItems(items);
    }

    // Adds or updates a recent database for a server/user, sorts by recency, and truncates if needed.
    // Uses window.SqlAuthContext for server/user.
    function addRecentDatabase(database) {
        const ctx = getSqlAuthContext();
        if (!ctx) return;
        let items = getRecentItems();
        let item = items.find(x => x.server === ctx.SqlServer && x.user === ctx.SqlUserName);
        if (!item) {
            item = { server: ctx.SqlServer, user: ctx.SqlUserName, databases: [] };
            items.unshift(item);
        }
        const dbIdx = item.databases.indexOf(database);
        if (dbIdx !== -1) {
            item.databases.splice(dbIdx, 1);
        }
        item.databases.unshift(database);
        if (item.databases.length > MAX_RECENT_ITEMS) {
            item.databases = item.databases.slice(0, MAX_RECENT_ITEMS);
        }
        // Move this server/user to front
        const idx = items.findIndex(x => x.server === ctx.SqlServer && x.user === ctx.SqlUserName);
        if (idx !== 0) {
            items.splice(idx, 1);
            items.unshift(item);
        }
        if (items.length > MAX_RECENT_ITEMS) {
            items = items.slice(0, MAX_RECENT_ITEMS);
        }
        saveRecentItems(items);
    }

    // Removes a recent server/user pair (and its databases) from the list.
    // Uses window.SqlAuthContext for server/user.
    function removeRecentServerUser() {
        const ctx = getSqlAuthContext();
        if (!ctx) return;
        let items = getRecentItems();
        items = items.filter(x => !(x.server === ctx.SqlServer && x.user === ctx.SqlUserName));
        saveRecentItems(items);
    }

    // Removes a database from a server/user pair's database list.
    // Uses window.SqlAuthContext for server/user.
    function removeRecentDatabase(database) {
        const ctx = getSqlAuthContext();
        if (!ctx) return;
        let items = getRecentItems();
        let item = items.find(x => x.server === ctx.SqlServer && x.user === ctx.SqlUserName);
        if (item) {
            item.databases = item.databases.filter(db => db !== database);
            saveRecentItems(items);
        }
    }

    // Expose for use in form handlers
    window.SqlAuthRecent = {
        getRecentItems,
        saveRecentItems,
        addRecentServerUser,
        addRecentDatabase,
        removeRecentServerUser,
        removeRecentDatabase
    };
    // --- End Recent Items Management ---
})();